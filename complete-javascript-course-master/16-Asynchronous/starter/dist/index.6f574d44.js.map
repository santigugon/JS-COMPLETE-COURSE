{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\n\nconst btn = document.querySelector('.btn-country');\nconst countriesContainer = document.querySelector('.countries');\nconst images = document.querySelector('.images');\n///////////////////////////////////////\n// const getCountryAndNeighbourData = function (country) {\n//   const request = new XMLHttpRequest();\n//   request.open('GET', `https://restcountries.com/v2/name/${country}`);\n//   request.send();\n//   request.addEventListener('load', function () {\n//     const [data] = JSON.parse(this.responseText);\n//     renderCountry(data);\n\n//     const [neighbour] = data.borders;\n\n//     if (!neighbour) return;\n\n//     //Data2\n//     console.log(neighbour);\n\n//     const request2 = new XMLHttpRequest();\n//     request2.open('GET', `https://restcountries.com/v2/alpha/${neighbour}`);\n//     request2.send();\n//     request2.addEventListener('load', function () {\n//       const data2 = JSON.parse(this.responseText);\n//       console.log(data2);\n//       renderCountry(data2, 'neighbour');\n//     });\n//   });\n// };\n\nconst renderCountry = function (data, className = '') {\n  const html = `    <article class=\"country ${className}\">\n  <img class=\"country__img\" src=\"${data.flag}\" />\n  <div class=\"country__data\">\n    <h3 class=\"country__name\">${data.name}</h3>\n    <h4 class=\"country__region\">${data.region}</h4>\n    <p class=\"country__row\"><span>üë´</span>${(\n      data.population / 1000000\n    ).toFixed(1)}M people</p>\n    <p class=\"country__row\"><span>üó£Ô∏è${data.languages[0].name}</span>LANG</p>\n    <p class=\"country__row\"><span>üí∞${data.currencies[0].name}</span>CUR</p>\n  </div>\n</article>`;\n  countriesContainer.insertAdjacentHTML('beforeEnd', html);\n  countriesContainer.style.opacity = 1;\n};\n\n// getCountryAndNeighbourData('russia');\n\n//PROMISES\n\nconst request = fetch(`https://restcountries.com/v2/alpha/USA`);\n\nconst getCountryData = function (country) {\n  country = country.toLowerCase();\n  console.log(country);\n\n  jsonHandler(\n    `https://restcountries.com/v2/name/${country}`,\n    'Country not found'\n  )\n    .then(data => {\n      const neighbour = data[0].borders?.[0];\n      renderCountry(data[0]);\n      if (!neighbour) throw new Error('No neighbour found');\n      return jsonHandler(\n        `https://restcountries.com/v2/alpha/${neighbour}`,\n        'Not neighbour'\n      );\n    })\n    .then(data => renderCountry(data, 'neighbour'))\n    .catch(err => {\n      console.error(`The error is ${err}`);\n      renderError(err);\n    });\n};\n\nconst asyncgetCountryData = async function (country) {\n  country = country.toLowerCase();\n\n  const json = await jsonHandler(\n    `https://restcountries.com/v2/name/${country}`,\n    'Country not found'\n  );\n\n  const neighbour = json[0].borders?.[0];\n  renderCountry(json[0]);\n  if (!neighbour) throw new Error('No neighbour found');\n  else {\n    const neighbourJson = await jsonHandler(\n      `https://restcountries.com/v2/alpha/${neighbour}`,\n      'Not neighbour'\n    );\n    renderCountry(neighbourJson, 'neighbour');\n  }\n};\n\nconst renderError = function (message) {\n  console.error(message);\n  images.insertAdjacentText(\n    'beforeend',\n    `ERROR MESSAGE: ${message} Try again!`\n  );\n  images.style.opacity = 1;\n};\n\nconst jsonHandler = function (url, errorMsg = 'Something went wrong') {\n  return fetch(url).then(response => {\n    if (!response.ok) throw new Error(`${errorMsg} (${response.status})`);\n    return response.json();\n  });\n};\n\n//Coding CHALLENGE 1\n// btn.addEventListener('click', function () {\n//   navigator.geolocation.getCurrentPosition(reverseGeoCoding, function () {\n//     alert('Could not get current position');\n//   });\n// });\n\nconst getPosition = function () {\n  return new Promise(function (resolve, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject);\n  });\n};\nconst reverseGeoCoding = function () {\n  getPosition()\n    .then(pos => {\n      const { coords } = pos;\n      const { latitude } = coords;\n      const { longitude } = coords;\n      console.log(latitude, longitude);\n      return fetch(`https://geocode.xyz/${latitude},${longitude}?geoit=json`);\n    })\n    .then(response => {\n      if (!response.ok) throw new Error('Wait for the page to cool down');\n\n      return response.json();\n    })\n    .then(data => getCountryData(data.country))\n    .catch(err => renderError(err));\n};\n\nconst getLocation = function () {};\n\n// Coding Challenge #2\n\n// function createImage() {}\n\n// const imageElement = document.querySelector('.images');\n\n// for (let i = 0; i <= 2; i++) {\n//   imageElement.src = `img/img-1.jpg`;\n\n//   function showImage() {\n//     return new Promise(resolve => {\n//       imageElement.style.display = 'block';\n//       resolve();\n//     });\n//   }\n\n//   function hideImage() {\n//     return new Promise(resolve => {\n//       imageElement.style.display = 'none';\n//       resolve();\n//     });\n//   }\n\n//   showImage().then(() => {\n//     setTimeout(() => {\n//       hideImage();\n//     }, 2000);\n//   });\n// }\n\nlet currentImage;\n//Coding Challenge 2\nfunction createImage(imgPath) {\n  return new Promise(function (resolve, reject) {\n    let img = document.createElement('img');\n    img.src = imgPath;\n    currentImage = img;\n    img.classList.add('parallel');\n\n    img.addEventListener('load', function () {\n      images.appendChild(img);\n      console.log('QUEE?');\n\n      resolve(img);\n    });\n\n    img.addEventListener('error', function () {\n      reject(new Error('Image not found'));\n    });\n  })\n    .then(img =>\n      setTimeout(function () {\n        img.remove();\n        if (i < 3) i++;\n        if (i == 3) i = 1;\n        3;\n\n        createImage(`img/img-${i}.jpg`);\n      }, 2000)\n    )\n    .catch(err => console.error(err));\n}\nlet i = 1;\n\n// createImage(`img/img-${i}.jpg`);\nasync function whereAmIAsync() {\n  try {\n    const position = await getPosition();\n    const { coords } = position;\n    const { latitude } = coords;\n    const { longitude } = coords;\n\n    console.log(position);\n\n    if (!position) throw new Error('Could not get your positiion');\n\n    const countryAPI = await fetch(\n      `https://geocode.xyz/${latitude},${longitude}?geoit=json`\n    );\n    console.log(countryAPI.ok);\n\n    if (!countryAPI.ok) throw new Error('Could not get country data');\n\n    const countryJson = await countryAPI.json();\n    console.log(countryJson);\n    const country = countryJson.country;\n\n    const countryRender = await asyncgetCountryData(country);\n\n    return country;\n  } catch (err) {\n    renderError(err);\n    throw err;\n  }\n}\nbtn.addEventListener('click', whereAmIAsync);\n\nasync function returningValuesAsync() {\n  try {\n    const mainFunc = await whereAmIAsync();\n    console.log(mainFunc);\n    console.log('Finished getting location!');\n  } catch (err) {\n    renderError(err);\n  }\n}\n\n// returningValuesAsync();\n\nfunction wait(s) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      console.log(s, 'seconds');\n\n      resolve();\n    }, s * 1000);\n  });\n}\n// Coding challenge 3\nfunction createImage(imgPath) {\n  return new Promise(function (resolve, reject) {\n    let img = document.createElement('img');\n    img.src = imgPath;\n    currentImage = img;\n\n    img.addEventListener('load', function () {\n      images.appendChild(img);\n      console.log('QUEE?');\n\n      resolve(img);\n    });\n\n    img.addEventListener('error', function () {\n      reject(new Error('Image not found'));\n    });\n  });\n}\nconst loadNPause = async function () {\n  try {\n    for (let i = 1; i <= 3; i++) {\n      const image = await createImage(`img/img-${i}.jpg`);\n      console.log(image);\n\n      await wait(2);\n      image.remove();\n    }\n  } catch (error) {\n    renderError(error);\n  }\n};\n// loadNPause();\n\nconst loadAll = async function () {\n  let imgArr = [`img/img-${1}.jpg`, `img/img-${2}.jpg`, `img/img-${3}.jpg`];\n  //let imgs = imgArr.map(imgUrl => createImage(imgUrl));\n  // console.log(imgs);\n  let combinatorImgs = Promise.all(\n    imgArr.map(img => {\n      createImage(img);\n      // img.classList.add('parallel');\n    })\n  );\n};\nloadAll();\n"],"names":["btn","document","querySelector","countriesContainer","images","renderCountry","data","className","html","flag","name","region","population","toFixed","languages","currencies","insertAdjacentHTML","style","opacity","request","fetch","getCountryData","country","toLowerCase","console","log","jsonHandler","then","neighbour","borders","Error","catch","err","error","renderError","asyncgetCountryData","async","json","neighbourJson","message","insertAdjacentText","url","errorMsg","response","ok","status","getPosition","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","reverseGeoCoding","pos","coords","latitude","longitude","getLocation","currentImage","createImage","imgPath","img","createElement","src","classList","add","addEventListener","appendChild","setTimeout","remove","i","whereAmIAsync","position","countryAPI","countryJson","returningValuesAsync","mainFunc","wait","s","loadNPause","image","loadAll","imgArr","all","map"],"version":3,"file":"index.6f574d44.js.map"}