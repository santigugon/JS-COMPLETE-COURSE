"use strict";const months=["January","February","March","April","May","June","July","August","September","October","November","December"],form=document.querySelector(".form"),containerWorkouts=document.querySelector(".workouts"),inputType=document.querySelector(".form__input--type"),inputDistance=document.querySelector(".form__input--distance"),inputDuration=document.querySelector(".form__input--duration"),inputCadence=document.querySelector(".form__input--cadence"),inputElevation=document.querySelector(".form__input--elevation"),map=L.map("map"),botonAgregar=document.querySelector(".botonprueba1"),botonQuitar=document.querySelector(".botonprueba2"),now=new Date,resetBtn=document.querySelector(".reset__btn"),editBtn=document.querySelector(".edit__btn"),eraseBtn=document.querySelector(".erase__btn"),formBtn=document.querySelector(".form__btn"),dateOptions={hour:"numeric",minute:"numeric",day:"numeric",month:"numeric",year:"numeric"},workoutElement=document.querySelector(".workout"),sateliteImg=document.querySelector("#satelite"),relieveImg=document.querySelector("#relieve"),findMe=document.querySelector("#findMe");let Id,trainingType,popUpContent,lastTraining,mapEvent,mapType,editingWorkout,workoutsObj=[],swappingTypes=!1,editingTime=!1;const prueba=e=>{},editionWorkout=function(){};class App{constructor(){this._getLocalStorage(),this._getPosition(),workoutsObj.forEach((e=>this._markerRender(e))),this._toggleElevationField(),map.on("click",this._showForm),form.addEventListener("submit",this._newWorkout.bind(this)),containerWorkouts.addEventListener("click",this._moveToPopUp),resetBtn.addEventListener("click",this._resetLocalStorage),editBtn.addEventListener("click",this._showEditForm),eraseBtn.addEventListener("click",this._deleteWorkout),sateliteImg.addEventListener("click",function(){mapType=1,localStorage.removeItem("mapType"),localStorage.setItem("mapType",JSON.stringify(mapType)),swappingTypes=!0,this._getPosition()}.bind(this)),relieveImg.addEventListener("click",function(){mapType=0,localStorage.removeItem("mapType"),localStorage.setItem("mapType",JSON.stringify(mapType)),swappingTypes=!0,this._getPosition()}.bind(this)),findMe.addEventListener("click",function(){swappingTypes=!1,this._getPosition()}.bind(this))}_getPosition(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(this._loadMap,(function(){alert("Could not get current position")}))}_loadMap(e){let{latitude:t}=e.coords,{longitude:o}=e.coords,n=[t,o];swappingTypes||map.setView(n,20),mapType||(mapType=0),0==mapType?L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}).addTo(map):1==mapType&&L.tileLayer("https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",{attribution:"Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community"}).addTo(map)}_showForm(e){inputType.classList.remove("hidden__option"),mapEvent=e,form.classList.remove("hidden"),inputDistance.focus(),inputCadence.value=inputDistance.value=inputDuration.value=inputDuration.value=inputElevation.value=""}_newWorkout(e){if(editingTime)return;let t,o=!1;e.preventDefault();const{lat:n,lng:i}=mapEvent.latlng,a=[n,i];inputCadence.closest(".form__row").classList.contains("form__row--hidden")?inputElevation.closest(".form__row").classList.contains("form__row--hidden")||(Id||(Id=0),inputDistance.value>0&&inputDuration.value>0?(workoutsObj.push(lastTraining=new Cycling(Id,inputDistance.value,inputDuration.value,a,inputElevation.value)),Id+=1,trainingType="cycling",this._workoutRender(lastTraining),popUpContent=`üö¥ ${lastTraining.description} `,t="cycling-popup",o=!0):alert("Please enter a positive value")):(Id||(Id=0),inputDistance.value>0&&inputDuration.value>0&&inputCadence.value>0?(workoutsObj.push(lastTraining=new Running(Id,inputDistance.value,inputDuration.value,a,inputCadence.value)),Id+=1,trainingType="running",popUpContent=` üèÉ‚Äç‚ôÇÔ∏è${lastTraining.description}`,t="running-popup",this._workoutRender(lastTraining),o=!0):alert("Please enter positive values")),form.classList.add("hidden"),this._markerRender(lastTraining),this._setLocalStorage()}_editWorkout=e=>{if(!editingTime)return;eraseBtn.classList.remove("hidden__option"),form.addEventListener("submit",this._infoModifyWorkout),inputType.classList.add("hidden__option");let t=e.target.closest(".workout");if(!t)return;let o=t.dataset.id;editingWorkout=workoutsObj[o];let{name:n}=editingWorkout,{cadence:i}=editingWorkout,{duration:a}=editingWorkout,{distance:r}=editingWorkout,{elevationGain:s}=editingWorkout;inputDistance.value=r,inputDuration.value=a,"Running"==n?(inputCadence.value=i,inputCadence.closest(".form__row").classList.contains("form__row--hidden")&&(inputType.value="running",inputElevation.closest(".form__row").classList.toggle("form__row--hidden"),inputCadence.closest(".form__row").classList.toggle("form__row--hidden"))):"Cycling"==n&&(inputElevation.value=s,inputElevation.closest(".form__row").classList.contains("form__row--hidden")&&(inputType.value="cycling",inputElevation.closest(".form__row").classList.toggle("form__row--hidden"),inputCadence.closest(".form__row").classList.toggle("form__row--hidden"))),console.log(editingWorkout),console.log("\n\n"),form.classList.remove("hidden")};_deleteWorkout=()=>{let e=editingWorkout.id;delete workoutsObj[e],this._setLocalStorage(),location.reload()};_showEditForm=()=>{editingTime?editingTime&&(editingTime=!1,editBtn.textContent="EDIT",formBtn.textContent="SUBMIT TRAINING",form.classList.add("hidden"),form.removeEventListener("submit",this._infoModifyWorkout)):(editingTime=!0,editBtn.textContent="END EDITION",containerWorkouts.addEventListener("click",this._editWorkout.bind(App)),formBtn.textContent="SUBMIT EDITION")};_toggleElevationField(){inputType.addEventListener("change",(function(e){inputElevation.closest(".form__row").classList.toggle("form__row--hidden"),inputCadence.closest(".form__row").classList.toggle("form__row--hidden")}))}_markerRender(e){if(!e)return;let{coords:t}=e;L.marker(t).addTo(map).bindPopup(L.popup({maxWidth:200,minWidth:100,autoClose:!1,closeOnClick:!1,className:`${e.name.toLowerCase()}-popup`})).setPopupContent(`${"Running"==e.name?"üèÉ‚Äç‚ôÇÔ∏èüèÉ":"üö¥"}${e.description}`).openPopup()}_workoutRender(e){if(!e)return;let t=`<li class="workout workout--${e.name.toLowerCase()}" data-id=${e.id}>\n    <h2 class="workout__title">${e.description}</h2>\n    <div class="workout__details">\n      <span class="workout__icon">${"Running"===e.name?"üèÉ‚Äç‚ôÇÔ∏è":"üö¥"}</span>\n      <span class="workout__value">${e.distance}</span>\n      <span class="workout__unit">km</span>\n    </div>\n    <div class="workout__details">\n      <span class="workout__icon">‚è±</span>\n      <span class="workout__value">${e.duration}</span>\n      <span class="workout__unit">min</span>\n    </div>`;"Running"===e.name?t+=`<div class="workout__details">\n      <span class="workout__icon">‚ö°Ô∏è</span>\n      <span class="workout__value">${e.pace}</span>\n      <span class="workout__unit">km/hr</span>\n    </div>\n    <div class="workout__details">\n      <span class="workout__icon">ü¶∂üèº</span>\n      <span class="workout__value">${e.cadence}</span>\n      <span class="workout__unit">spm</span>\n    </div>\n  </li>\n`:"Cycling"===e.name&&(t+=` <div class="workout__details">\n            <span class="workout__icon">‚ö°Ô∏è</span>\n            <span class="workout__value">${e.speed}</span>\n            <span class="workout__unit">km/h</span>\n          </div>\n          <div class="workout__details">\n            <span class="workout__icon">‚õ∞</span>\n            <span class="workout__value">${e.elevationGain}</span>\n            <span class="workout__unit">m</span>\n          </div>`),form.insertAdjacentHTML("afterend",t)}_infoModifyWorkout=e=>{if(e.preventDefault(),!editingTime)return;console.log(editingWorkout);let t=editingWorkout.id,o=(inputDistance.value/inputDuration.value*60).toFixed(2);"Running"==editingWorkout.name?(workoutsObj[t].cadence=inputCadence.value,workoutsObj[t].pace=o):"Cycling"==editingWorkout.name&&(workoutsObj[t].elevationGain=inputElevation.value,workoutsObj[t].speed=o),workoutsObj[t].distance=inputDistance.value,workoutsObj[t].duration=inputDuration.value,this._setLocalStorage(),this._workoutRender(editingWorkout),location.reload()};_moveToPopUp(e){let t=e.target.closest(".workout");if(!t)return;let o=t.dataset.id;console.log(o);let{coords:n}=workoutsObj[o];map.setView(n,20,{animate:!0,pan:{duration:1}})}_setLocalStorage(){localStorage.setItem("workout",JSON.stringify(workoutsObj)),localStorage.removeItem("Id"),localStorage.setItem("Id",JSON.stringify(Id))}_getLocalStorage(){let e=JSON.parse(localStorage.getItem("workout"));mapType=JSON.parse(localStorage.getItem("mapType")),Id=JSON.parse(localStorage.getItem("Id")),e&&(workoutsObj=e,workoutsObj.forEach((e=>{this._workoutRender(e)})))}_resetLocalStorage(){localStorage.removeItem("workout"),localStorage.removeItem("Id"),Id=0,location.reload()}}class Workout{constructor(e,t,o,n){this.id=e,this.distance=t,this.duration=o,this.coords=n,this.date=new Date}_setDescription(){this.description=`${this.name} on ${["January","February","March","April","May","June","July","August","September","October","November","December"][this.date.getMonth()]} ${this.date.getDate()}`}}class Running extends Workout{constructor(e,t,o,n,i){super(e,t,o,n),this.name="Running",this.cadence=i,this.pace=(t/o*60).toFixed(2),this._setDescription()}}class Cycling extends Workout{constructor(e,t,o,n,i){super(e,t,o,n),this.name="Cycling",this.speed=(t/o*60).toFixed(2),this.elevationGain=i,this._setDescription()}}const aplicacion=new App;console.log(Id),console.log(workoutsObj);
//# sourceMappingURL=index.a567e2f1.js.map
